// $ANTLR : "tefkat.g" -> "TefkatLexer.java"$

package tefkat.model.parser;

public interface TefkatLexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int UNDERSCORE = 4;
	int ESCAPEDWS = 5;
	int ALPHA = 6;
	int DIGIT = 7;
	int SCHEME = 8;
	int ID = 9;
	int ANON_ID = 10;
	int URITOK = 11;
	int BOOLEAN = 12;
	int ID_OR_IMPORT_OR_OBJREF = 13;
	int FQID = 14;
	int STRING = 15;
	int ESCAPE = 16;
	int INT = 17;
	int REAL = 18;
	int REAL_OR_INT = 19;
	int AT = 20;
	int LANGLE = 21;
	int RANGLE = 22;
	int LBRACK = 23;
	int RBRACK = 24;
	int LBRACE = 25;
	int RBRACE = 26;
	int LSQUARE = 27;
	int RSQUARE = 28;
	int COMMA = 29;
	int PERIOD = 30;
	int ARROW = 31;
	int COLON = 32;
	int SEMI = 33;
	int ASSIGN = 34;
	int RELOP = 35;
	int ADDOP = 36;
	int MULOP = 37;
	int BANG = 38;
	int DOLLAR = 39;
	int HASH = 40;
	int WS = 41;
	int SL_COMMENT = 42;
	int ML_COMMENT = 43;
	int LITERAL_TRANSFORMATION = 44;
	int LITERAL_CLASS = 45;
	int LITERAL_EXTENDS = 46;
	int LITERAL_MAP = 47;
	int LITERAL_IMPORT = 48;
	int LITERAL_PATTERN = 49;
	int LITERAL_FORALL = 50;
	int LITERAL_WHERE = 51;
	int LITERAL_TEMPLATE = 52;
	int LITERAL_ABSTRACT = 53;
	int LITERAL_RULE = 54;
	int LITERAL_MAKE = 55;
	int LITERAL_SET = 56;
	int LITERAL_OVERRIDES = 57;
	int LITERAL_SUPERSEDES = 58;
	int LITERAL_EXACT = 59;
	int LITERAL_DYNAMIC = 60;
	int LITERAL_AND = 61;
	int LITERAL_OR = 62;
	int LITERAL_IF = 63;
	int LITERAL_ENDIF = 64;
	int LITERAL_THEN = 65;
	int LITERAL_ELSEIF = 66;
	int LITERAL_ELSE = 67;
	int LITERAL_NOT = 68;
	int LITERAL_LINKS = 69;
	int LITERAL_UNDEF = 70;
	int LITERAL_BEFORE = 71;
	int LITERAL_IN = 72;
	int LITERAL_FROM = 73;
	int LITERAL_LINKING = 74;
	int LITERAL_WITH = 75;
	int LITERAL_true = 76;
	int LITERAL_false = 77;
}
